"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertNumber = exports.assertNodeObject = exports.hashLtOperator = exports.equalsOperator = exports.alwaysTrue = exports.isAlwaysTrue = exports.andStatement = exports.isNodeObject = exports.isStatement = exports.isAndStatement = exports.getNodesFromStatement = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
function getNodesFromStatement(statement) {
    return statement.slice(1);
}
exports.getNodesFromStatement = getNodesFromStatement;
function isAndStatement(statement) {
    return statement[0] === 'and';
}
exports.isAndStatement = isAndStatement;
function isStatement(node) {
    return Array.isArray(node);
}
exports.isStatement = isStatement;
function isNodeObject(node) {
    return typeof node === 'object' && !isStatement(node);
}
exports.isNodeObject = isNodeObject;
function andStatement(nodes) {
    return ['and', ...nodes];
}
exports.andStatement = andStatement;
function isAlwaysTrue(node) {
    return node === 'true';
}
exports.isAlwaysTrue = isAlwaysTrue;
function alwaysTrue() {
    return 'true';
}
exports.alwaysTrue = alwaysTrue;
function equalsOperator() {
    return '==';
}
exports.equalsOperator = equalsOperator;
function hashLtOperator() {
    return 'hash_lt';
}
exports.hashLtOperator = hashLtOperator;
function assertNodeObject(node) {
    (0, assert_1.default)(isNodeObject(node), 'Branch mapping node must be an object. Received: ' + JSON.stringify(node));
}
exports.assertNodeObject = assertNodeObject;
function assertNumber(operand) {
    (0, assert_1.default)(typeof operand === 'number', 'Expected a number. Received: ' + JSON.stringify(operand));
}
exports.assertNumber = assertNumber;
